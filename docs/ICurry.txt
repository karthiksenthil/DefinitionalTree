The ICurry format
Sergio Antoy
Wed May 25, 2016

This document describes the ICurry format, a representation of Curry programs developed for a Curry compiler that takes a Curry source programs generates corresponding imperative and/or object-oriented executable code.

A Curry module is translated into an ICurry module. There is no type information in an ICurry module because only well typed Curry modules are translated.
The examples that follow are an informal representation of the internal structure.
The code of the following examples was generated for the following Curry module

    module bintree where
    data Bintree x = Leaf | Branch x (Bintree x) (Bintree x)
    isin _ Leaf = False
    isin x (Branch y l r) = x==y || isin x l || isin x r


An ICurry module defines:
  1. The module name, a string
  2. The list of imported modules, strings as well
  3. A list of data declarations, specified below
  4. A list of function declarations, specified below
  
Ex:
    module "bintree"
      import
        "Prelude"
      data ...
      function ...


In ICurry, strings are quoted. A name in ICurry is a pair of strings representing a Curry qualified name, i.e., a module name and a 

Ex:
    "bintree.Bintree"

A data declaration declares a data type and its data constructor.
The data type is a name.
A data constructor is a name plus its arity and an index.
Data constructors of a data type are indexed sequentially starting from 0.
No type and no type variables are present in ICurry.

Ex:
    data "bintree.Bintree"
      constructor "bintree.Leaf" 0 0
      constructor "bintree.Branch" 3 1

A function definition consists of its name, arity and code.

Ex:

    function "bintree.isin" 2
      code
        ...

The code of a function consists of one or more statements ending with a returned value.  The possible statements follows.  They take arguments as specified below.  The structure of an expression is discussed later.
  1. IExternal: takes a string that is the name of a function not defined in Curry.
  2. Comment: takes a string providing information generated by the translator, not a comment in the source Curry program.
  3. Declare: takes a positive integer uniquely identifying a variable within the module and the kind of variable.  There are 5 kinds:
     3.1. ILhs (n,i): identifies the i-th argument of an expression rooted by n and matched by a left-hand side.
     3.2. ICase: variable used for an A or B table
     3.3. IVar j (n,i): identifies the i-th argument of an expression rooted by n and bound to variable j.
     3.4. IBind: identifies a variable bound by a let block.
     3.5. IFree: identifies a free variable.
  4. Assign: takes an integer identifying a variable and an expression.  The variable is bound to the expression.
  5. Fill: takes an integer x, a list x of (name,integer) pairs and another integer y. It assigns variable y to the subexpression of x identified by l.  The list l defines a path in the binding of x. The first pair (n,i) is associated to the root of x where n is the label of the node and i is the index of a successor (argument of x). The n-th+1 pair is associated to the n-th node of the path.
  6. Return: takes an expression, the value to be returned by the function.
  7. ATable: it is used to pattern match an expression and dispatch the execution of the corresponding code.  The expression's type is algebraic (defined with a data declaration). It takes 5 arguments as follows.  Arg #1 is an integer uniquely identifying the table. Arg #2 is the number of entries in arg #5, the dispatch table. Arg #3 is a Boolean telling whether or not to narrow, 'flex' means yes, 'rigid' means no. Arg #4 is an integer identifying a variable bound to the expression being pattern matched. Arg #5 is a list of pairs (symbol,code) with the following meaning: if the expression of arg #4 is rooted by symbol, execute the corresponding code. [describe correspondence]
pattern match a value of an algebraic type and dispatch a computation.
  8. BTable: It is exactly like an ATable for expression was type is built-in, e.g., integers or characters.

Ex: (Fill)

    let x = Branch 11 (Branch 12 Leaf y) Leaf 
        y = Branch 13 (Branch 14 x Leaf) Leaf 
    in x

is translated into the following where 1 identifies variable x and 2 identifies variable y. Thus, y is assigned to the third argument of the second argument of x

    fill 1 with 2
      at "bintree.Branch":2 "bintree.Branch":3

Ex: (ATable)

Function isin of module bintree produces the following table where the dots stand for appropriate code.

    ATable 6 2 flex
      reference_var 6
      "bintree.Leaf" => ...
      "bintree.Branch" => ...

Expressions in ICurry represent graphs.  A node of a graph has a label and a list of successors, other nodes. An expression is one of the following cases:
  1. Exempt: a special kind of node representing "no expression".
  2. Reference: takes an int i, a node referring to the variable identified by i.
  3. Builtin: takes a builtin value, a node labeled by that value.
  4. Applic: represents a function (symbol) full application, takes 3 arguments. Arg #1 is a boolean telling whether arg #2 is a function (false) or a constructor (true).  Arg #2 is the label of the node.  Arg #3 is the sequence of successors.
  5. PartApplic: represents a partial application. Takes 2 arguments. Arg #1 is the number of missing arguments in arg #2.  Arg #2 is an expression in which the number of successors of the root is less then the arity of the label of the root.
  6. IOR: [does not show in .read files]

------------------------------------------------------------------

The complete ICurry program

    module "bintree"
      import
        "Prelude"
      data "bintree.Bintree"
        constructor "bintree.Leaf" 0 0
        constructor "bintree.Branch" 3 1
      function "bintree.isin" 2
        code
          declare_var 1 (ILhs (("bintree","isin"),1))
          declare_var 2 (ILhs (("bintree","isin"),2))
          declare_var 6 ICase
          assign 6
            reference_var 2
          ATable 6 2 flex
            reference_var 6
            "bintree.Leaf" =>
              return
                Node "Prelude.False"
            "bintree.Branch" =>
              declare_var 3 (IVar 6 (("bintree","Branch"),1))
              declare_var 4 (IVar 6 (("bintree","Branch"),2))
              declare_var 5 (IVar 6 (("bintree","Branch"),3))
              return
                Node "Prelude.||" (
                  Node "Prelude.==" (
                    reference_var 1 ,
                    reference_var 3 ) ,
                  Node "Prelude.||" (
                    Node "bintree.isin" (
                      reference_var 1 ,
                      reference_var 4 ) ,
                    Node "bintree.isin" (
                      reference_var 1 ,
                      reference_var 5 ) ) )
