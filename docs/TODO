Following is the list of TODO tasks/features for ruby_curry.

------------------------------------------------------------------
Tue Jun 21 16:31:12 PDT 2016 - Sergio

file expressions.rb should refactored

1.  Put everying in a module CT_Expressions to limit the visibility
    of "common" identifiers such as "Box" or "Application"

2.  Split the file into several files.
    (a) The definition and initialization of the classes,
        almost all the functionality should be moved out.
    (b) A file for printing.  Currently the method is "show",
        but it should be renamed "to_s".  This will enable
	expressions with variables that are not expressions.
	This will simplify some application, such as "Partial".
    (c) A file for equality.  Wait for this until the external
        function (==) of the Prelude is coded to see what is needed.
    (d) A similar file for "compare".

------------------------------------------------------------------
Sat Jun 18 14:33:07 PDT 2016 - Sergio

Check whether src/runtime/lib is being used.  If not remove.

------------------------------------------------------------------
Wed Jun 15 2016 - Karthik

Convert the examples in "user" directory to Curry code and remove
the old content. This directory is intended be used as user play area
with the object code created for any Curry program.

------------------------------------------------------------------
Sat Jun  4 13:11:27 PDT 2016 - Sergio

Need to define the purpose of each project directories.
The content of these directory should be under version control.

Some directory seem obsolete, e.g., "compiler".
The purpose of some directories is not clear, e.g., "user".
Should object code be checked in?

------------------------------------------------------------------
ITESM BELOW THIS LINE ARE SOLVED.
==================================================================


1. Integration of translator system 
		- convert .icur to ruby object code directly
		- this removes the intermediate JSON dependency

2. Adding support for modules whether user defined or in libraries such as the "Prelude"
		- this will provide code for library data types, like Bool and List and their operations
		- find the Curry code for "Prelude", convert to .icur which is then compiled to prelude_objectCode in Ruby. This file can be then included in all other object code files
		
3. Adding support for Exempt
		- use the $fail_symbol for constructing corresponding expressions

4. Handling builtin datatypes "Int" and "Char".  "String" is defined as [Char].

------------------------------------------------------------------

5. Problem of global variables in test suite
		- try a custom script to run all test cases instead of Rake
	 Solved : Added a custom rake task itest(independent test). Run with command "rake itest".
	 Added on : 28 May 2016
	 Solved on : 1 June 2016

6. Necessary for multiple passes for fully populating symbol table
		- example of odd_even.curry

			even Zero = Zero
			even Succ x = odd x
			odd Zero = Succ Zero
			odd Succ x = even(x)

			Here when ruby_curry is parsing the second rule, it panics as it is unaware of "odd" symbol which is defined later in code.
			
		- could try multiple passes or a forward declaration concept

	Solved by function declarations

------------------------------------------------------------------
Mon Jun  6 13:48:27 PDT 2016 - Sergio - FIXED Wed Jun 8

Must replace unallowed characters in ruby identifiers.
A Curry identifier like ++ is translated into $++_symbol, which is not a legal ruby identifier.

Unallowed characters could be translated in a sequence such as "_xy"
where xy is the hex code of the character. E.g., + becomes "_2B".
If the underscore itself is translated, though it is legal, then no
conflict can arise among Curry identifiers.

------------------------------------------------------------------
Sun Jun  5 14:45:52 PDT 2016 - Sergio - FIXED Mon Jun 6

Main function should be generated only when a "main" symbol is
defined.  Library modules should not have a main entry.

------------------------------------------------------------------
Thu Jun  2 13:39:44 PDT 2016 - Sergio - FIXED Mon Jun 6

Need a uniform policy for the directory of output files.
Without a uniform policy, scripts are not composable.

Many scripts in the bin directory read and write files.
Proposal: a script that takes input from directory X
writes output to directory either X or X/.curry .
Directory X/.curry should be used only for temporary files.

FIXED in same-dir branch.
All generated files go into .curry .
Other processors copy from there.

A copy of the generated ruby is still placed in "user",
but this should go away when a library load path is defined.


------------------------------------------------------------------
Sun Jun  5 14:48:59 PDT 2016 - Sergio - DONE Fri Jun 10

Need a library load path to load runtime and libraries regardless of
the location of the user dictory.

+++
Added script bin/exec for executing of the object code


------------------------------------------------------------------
Thu Jun  2 13:46:50 PDT 2016 - Sergio - Done Sun Jun 12

Need ruby name spaces for symbols in Curry module.
Without name spaces different symbols with the same name are confused.

Two curry modules can define the same symbol.
The current translation does not distinguish the two.
Proposal: the translation of a Curry module should be
a ruby module with the same name.  Non local symbols in ruby
will use the module resolution operator :: .

+++
Module names, hence file names, must start with an upper case letter.

------------------------------------------------------------------
June 4 2016 - Karthik - FAILED Mon Jun 13, 2016

Create a single executable for using ICurry in the Github repo
  - since the ICurry code by itself is big and difficult to setup on any 
    machine, it would be better to create an executable version which can be 
    invoked the translator system that will merged with ruby_curry

+++

There is a script, bin/make_standalone, to generate the stand alone
programs, but the programs work in very limited cases (mostly not).
Some warnings lead to believe that the stand alone still uses dynamic
libraries.
This task requires further investigation into Kics2 and ghc to
understand the problems and find a solution.

------------------------------------------------------------------
Sun Jun 12 21:15:37 PDT 2016 - DONE Mon Jun 13, 2016


Allow lower case module names in Curry program.

Ruby module names must start with an upper case letter
Hence Curry programs must have a name that starts with an upper case letter.

Perhaps, it suffices to capitalize the Curry module name,
since ruby imported modules must be explicitly named.

------------------------------------------------------------------
Mon Jun 13 20:57:20 PDT 2016 - Sergio - Done Tue Jun 14


Need a "System" module to hold the choice and fail symbols.

------------------------------------------------------------------
Wed Jun  8 14:33:53 PDT 2016 - Sergio - FIXED, NEEDS TESTING Jun 14 

The trace of the program is missing rewrite steps.
These steps are executed and the trace shows when they
are undone during backtracking.

Curry identifiers translated in Ruby during the compilation,
should be translated back into Curry during the trace.

------------------------------------------------------------------
Wed Jun 15 09:24:53 PDT 2016 - Sergio -- FIXED on 16 Jun 2016

Object code would benefit by some run-time options such as turning
tracing on and off.  This could be achieved by a command line flag

    ruby -t prog.rb

There is a ruby library,  'optparse', to make this task easy.

Once this is done, the default behavior of a program execution should
be to print every computed value, one per line, and terminate.
This should make testing easier.

------------------------------------------------------------------
Sun Jun  5 14:39:13 PDT 2016 - Sergio - FIXED on 16 Jun 2016

Revise class Operation.
What is the purpose of the 3rd argument of the constructor?

If it is always "nil" it should be removed.
If not it should be defined in the abstract RCurry.

------------------------------------------------------------------
Fri Jun 17 2016 - Karthik

Support for Fail expressions. Currently repl uses a global fail
expression. Change this and verify with a couple of test curry
programs

+++
I think this has been solved.

------------------------------------------------------------------
Sat Jun  4 12:28:02 PDT 2016 - Sergio

Need testing suite.
Code checked into the repository should pass the suite.

Current tests refers to an obsolete system.
At the very least, we should test that the translator from
ICurry to ruby produces no error on all the sample files.

+++
There are now two testing harnesses.
------------------------------------------------------------------
