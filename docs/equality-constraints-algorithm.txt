Wed Jul 6 2016

Algorithm to implement =:<= operator as given in [1], page 16 :

To evaluate e1 =:<= e2 :
1. Evaluate e1 to a head normal form h1
2. If h1 is a variable: bind it to e2
3. If h1 = c t1 . . . tn (where c is a constructor):
  (a) Evaluate e2 to a head normal form h2
  (b) If h2 is a variable: instantiate h2 to c x1 . . . xn (x1 , . . . , xn are fresh
      variables) and evaluate t1 =:<= x1 & . . . & tn =:<= xn
  (c) If h2 = c s1 . . . sn : evaluate t1 =:<= s1 & . . . & tn =:<= sn
  (d) Otherwise: fail


Pseudo code implementation in CT_External :

Operation =:<= is called with the usual argument expr.
Argument expr has 2 arguments that we call left and right.

  case left
  CHOICE and OPERATION => left.H; expr.H
  FAIL => return left
  VARIABLE =>
    right = left # is this correct ? what should be returned here ?
  CONSTRUCTOR =>
    case right
    CHOICE and OPERATION => left.H; expr.H
    FAIL => return right
    VARIABLE => # not sure if this case is correct
      k = arity of left.root
      right = Box.new(Application.new(left.root,[]))
      for i in 1..k
        type = ? # what should be the fresh variable type
        name = "freshVar#{i}"
        right.args << make_variable(name,type)
      end for
      
      return left.arg1 =:<= right.arg1 & ... & left.argk =:<= right.argk

    CONSTRUCTOR =>
      return left.arg1 =:<= right.arg1 & ... & left.argk =:<= right.argk

    end #case right
  end #case left


References-
[1] Sergio Antoy and Michael Hanus, Declarative Programming with
    Function Patterns 15th International Symposium on Logic-based
    Program Synthesis and Transformation (LOPSTR 2005), Springer LNCS,
    Vol. 3901, pages 6-22, 2005.